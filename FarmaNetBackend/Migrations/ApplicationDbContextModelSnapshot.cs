// <auto-generated />
using System;
using FarmaNetBackend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FarmaNetBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FarmaNetBackend.Models.Import", b =>
                {
                    b.Property<int>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SumPrice")
                        .HasColumnType("money");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ImportId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.ImportWithMedication", b =>
                {
                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("ImportId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("ImportWithMedications");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<string>("Composition")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Contraindications")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IndicationsForUse")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Instruction")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MedicationImageId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MedicationId");

                    b.HasIndex("MedicationImageId")
                        .IsUnique();

                    b.HasIndex("MedicationTypeId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.MedicationImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ImageId");

                    b.ToTable("MedicationImages");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.MedicationType", b =>
                {
                    b.Property<int>("MedicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MedicationTypeId");

                    b.ToTable("MedicationsTypes");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.MedicationWithManufacturer", b =>
                {
                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.HasKey("MedicationId", "ManufacturerId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("MedicationWithManufacturers");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyId"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PharmacyImageId")
                        .HasColumnType("int");

                    b.HasKey("PharmacyId");

                    b.HasIndex("PharmacyImageId")
                        .IsUnique();

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.PharmacyImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ImageId");

                    b.ToTable("PharmacyImages");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.PharmacyWithMedication", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("PharmacyId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("PharmacyWithMedications");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"));

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("SalaryInHours")
                        .HasColumnType("real");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Sale", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("PharmacyId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Inn")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkerAccount", b =>
                {
                    b.Property<int>("WorkerAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkerAccountId"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerInformationId")
                        .HasColumnType("int");

                    b.HasKey("WorkerAccountId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("WorkerInformationId");

                    b.ToTable("WorkerAccounts");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkerInformation", b =>
                {
                    b.Property<int>("WorkerInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkerInformationId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("Experience")
                        .HasColumnType("real");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PassportNumber")
                        .HasColumnType("int");

                    b.Property<short?>("PassportSeries")
                        .HasColumnType("smallint");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerInformationImageId")
                        .HasColumnType("int");

                    b.HasKey("WorkerInformationId");

                    b.HasIndex("PositionId");

                    b.HasIndex("WorkerInformationImageId")
                        .IsUnique();

                    b.ToTable("WorkersInformation");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkerInformationImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ImageId");

                    b.ToTable("WorkerInformationImages");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkingHours", b =>
                {
                    b.Property<int>("WorkingHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkingHoursId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int>("WorkerAccountId")
                        .HasColumnType("int");

                    b.HasKey("WorkingHoursId");

                    b.HasIndex("WorkerAccountId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WriteDowns", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("PharmacyId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("WriteDowns");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Import", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.Pharmacy", "Pharmacy")
                        .WithMany("Imports")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaNetBackend.Models.Supplier", "Supplier")
                        .WithMany("Imports")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.ImportWithMedication", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.Import", "Import")
                        .WithMany("ImportWithMedications")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaNetBackend.Models.Medication", "Medication")
                        .WithMany("ImportWithMedications")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Import");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Medication", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.MedicationImage", "MedicationImage")
                        .WithOne("Medication")
                        .HasForeignKey("FarmaNetBackend.Models.Medication", "MedicationImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaNetBackend.Models.MedicationType", "MedicationType")
                        .WithMany("Medications")
                        .HasForeignKey("MedicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicationImage");

                    b.Navigation("MedicationType");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.MedicationWithManufacturer", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.Manufacturer", "Manufacturer")
                        .WithMany("MedicationWithManufacturers")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaNetBackend.Models.Medication", "Medication")
                        .WithMany("MedicationWithManufacturers")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Pharmacy", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.PharmacyImage", "PharmacyImage")
                        .WithOne("Pharmacy")
                        .HasForeignKey("FarmaNetBackend.Models.Pharmacy", "PharmacyImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmacyImage");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.PharmacyWithMedication", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.Medication", "Medication")
                        .WithMany("PharmacyWithMedications")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaNetBackend.Models.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyWithMedications")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Sale", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.Medication", "Medication")
                        .WithMany("Sales")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaNetBackend.Models.Pharmacy", "Pharmacy")
                        .WithMany("Sales")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkerAccount", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.Pharmacy", "Pharmacy")
                        .WithMany("WorkerAccounts")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaNetBackend.Models.WorkerInformation", "WorkerInformation")
                        .WithMany("WorkerAccounts")
                        .HasForeignKey("WorkerInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("WorkerInformation");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkerInformation", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.Position", "Position")
                        .WithMany("WorkerInformations")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaNetBackend.Models.WorkerInformationImage", "WorkerInformationImage")
                        .WithOne("WorkerInformation")
                        .HasForeignKey("FarmaNetBackend.Models.WorkerInformation", "WorkerInformationImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("WorkerInformationImage");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkingHours", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.WorkerAccount", "WorkerAccount")
                        .WithMany("WorkingHours")
                        .HasForeignKey("WorkerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkerAccount");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WriteDowns", b =>
                {
                    b.HasOne("FarmaNetBackend.Models.Medication", "Medication")
                        .WithMany("WriteDowns")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaNetBackend.Models.Pharmacy", "Pharmacy")
                        .WithMany("WriteDowns")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Import", b =>
                {
                    b.Navigation("ImportWithMedications");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Manufacturer", b =>
                {
                    b.Navigation("MedicationWithManufacturers");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Medication", b =>
                {
                    b.Navigation("ImportWithMedications");

                    b.Navigation("MedicationWithManufacturers");

                    b.Navigation("PharmacyWithMedications");

                    b.Navigation("Sales");

                    b.Navigation("WriteDowns");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.MedicationImage", b =>
                {
                    b.Navigation("Medication");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.MedicationType", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Pharmacy", b =>
                {
                    b.Navigation("Imports");

                    b.Navigation("PharmacyWithMedications");

                    b.Navigation("Sales");

                    b.Navigation("WorkerAccounts");

                    b.Navigation("WriteDowns");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.PharmacyImage", b =>
                {
                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Position", b =>
                {
                    b.Navigation("WorkerInformations");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.Supplier", b =>
                {
                    b.Navigation("Imports");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkerAccount", b =>
                {
                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkerInformation", b =>
                {
                    b.Navigation("WorkerAccounts");
                });

            modelBuilder.Entity("FarmaNetBackend.Models.WorkerInformationImage", b =>
                {
                    b.Navigation("WorkerInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
